// ÁæéÈ£üÈ°µÈù¢JavaScriptÂäüËÉΩ

document.addEventListener('DOMContentLoaded', function() {
    // initFoodCategories(); // Ê≥®ÈáäÊéâËøô‰∏™ÂáΩÊï∞Ôºå‰øùÊåÅHTML‰∏≠ÁöÑÂàÜÁ±ªÂå∫ÂüüÁªìÊûÑ
    initFoodCards();
    initRestaurantMap();
    initFoodSearch();
    initReviewSystem();
    initCategoryTabs();
    initScrollAnimations();
    initHoverEffects();
});

// ÁæéÈ£üÊï∞ÊçÆ
const foodData = [
    {
        id: 1,
        name: 'Ê±â‰∏≠Èù¢ÁöÆ',
        category: 'noodles',
        image: 'img/food1.jpg',
        rating: 4.9,
        price: 15,
        description: 'Ê±â‰∏≠ÊúÄËëóÂêçÁöÑÂ∞èÂêÉÔºåÈù¢ÁöÆÁàΩÊªëÁ≠ãÈÅìÔºåÈÖç‰ª•ÁâπÂà∂Ëæ£Ê§íÊ≤πÂíåËíúËìâÔºåÈÖ∏Ëæ£ÂºÄËÉÉÔºåÂõûÂë≥Êó†Á©∑„ÄÇ',
        ingredients: ['Èù¢ÁöÆ', 'Ë±ÜËäΩËèú', 'ËÉ°ËêùÂçú‰∏ù', 'ÈªÑÁìú‰∏ù', 'Ëæ£Ê§íÊ≤π', 'ËíúËìâ', 'ÈÜã'],
        restaurants: ['ËÄÅÊùéÈù¢ÁöÆÂ∫ó', 'Ê±âÊ±üÈù¢ÁöÆ', '‰º†ÁªüÁæéÈ£üÂùä'],
        nutrition: { calories: 280, protein: 8, carbs: 45, fat: 6 },
        tags: ['ÁªèÂÖ∏', 'ÂøÖÂ∞ù', 'Á¥†È£ü'],
        cookingTime: 'Áé∞ÂÅöÁé∞Âçñ',
        origin: 'Ê±â‰∏≠‰º†ÁªüÂ∞èÂêÉÔºåÂéÜÂè≤ÊÇ†‰πÖ'
    },
    {
        id: 2,
        name: 'ËèúË±ÜËÖê',
        category: 'soup',
        image: 'img/food2.jpg',
        rating: 4.7,
        price: 12,
        description: 'Ê±â‰∏≠ÁâπËâ≤Ê±§ÂìÅÔºåÈÄâÁî®‰ºòË¥®ÈªÑË±ÜÂà∂‰ΩúÔºåÈÖç‰ª•Êó∂‰ª§Ëî¨ËèúÔºåËê•ÂÖª‰∏∞ÂØåÔºåÂè£ÊÑüÊ∏ÖÈ¶ô„ÄÇ',
        ingredients: ['Â´©Ë±ÜËÖê', 'ÈùíËèú', 'ËÉ°ËêùÂçú', 'Êú®ËÄ≥', 'È¶ôËèá', 'Ëë±Ëä±'],
        restaurants: ['ËÄÅÂë≥ÈÅì', 'Ê±â‰∏≠‰∫∫ÂÆ∂', 'ÁªøËâ≤È£üÂ∫ú'],
        nutrition: { calories: 180, protein: 12, carbs: 15, fat: 8 },
        tags: ['ÂÅ•Â∫∑', 'Ëê•ÂÖª', 'Ê∏ÖÊ∑°'],
        cookingTime: '15ÂàÜÈíü',
        origin: 'Ê±â‰∏≠Ê∞ëÈó¥‰º†ÁªüÊ±§ÂìÅ'
    },
    {
        id: 3,
        name: 'ÊµÜÊ∞¥Èù¢',
        category: 'noodles',
        image: 'img/food3.jpg',
        rating: 4.6,
        price: 18,
        description: 'Â§èÊó•Ê∂àÊöë‰Ω≥ÂìÅÔºåÈÖ∏Ê±§ÁàΩÂè£ÔºåÈù¢Êù°Âä≤ÈÅìÔºåÈÖçËèú‰∏∞ÂØåÔºåÊòØÊ±â‰∏≠‰∫∫Â§èÂ§©ÁöÑÊúÄÁà±„ÄÇ',
        ingredients: ['ÊâãÂ∑•Èù¢Êù°', 'ÊµÜÊ∞¥', 'Èü≠Ëèú', 'ËÉ°ËêùÂçú', 'ÂúüË±Ü‰∏ù', 'Ëæ£Ê§íÊ≤π'],
        restaurants: ['ÊµÜÊ∞¥Èù¢È¶Ü', 'ËÄÅÂ≠óÂè∑', 'Ê±â‰∏≠Âë≥ÈÅì'],
        nutrition: { calories: 320, protein: 10, carbs: 55, fat: 5 },
        tags: ['Ê∂àÊöë', 'ÈÖ∏ÁàΩ', '‰º†Áªü'],
        cookingTime: '10ÂàÜÈíü',
        origin: 'Ê±â‰∏≠Â§èÂ≠£ÁâπËâ≤Èù¢È£ü'
    },
    {
        id: 4,
        name: 'Á≤âÁöÆÂ≠ê',
        category: 'cold',
        image: 'img/food4.jpg',
        rating: 4.5,
        price: 20,
        description: 'Âä≤ÈÅìÊúâÂöºÂä≤ÁöÑÁ≤âÁöÆÔºåÈÖç‰ª•Â§öÁßçËî¨Ëèú‰∏ùÂíåÁâπÂà∂Ë∞ÉÊñôÔºåÂè£ÊÑü‰∏∞ÂØåÔºåËê•ÂÖªÂùáË°°„ÄÇ',
        ingredients: ['Á∫¢ËñØÁ≤âÁöÆ', 'Ë±ÜËäΩ', 'ËÉ°ËêùÂçú‰∏ù', 'ÈªÑÁìú‰∏ù', 'È¶ôËèú', 'Ëä±ÁîüÁ±≥'],
        restaurants: ['Á≤âÁöÆ‰∏ìÂÆ∂', 'Â∑∑Â≠êÊ∑±Â§Ñ', '‰º†ÁªüÂ∞èÂêÉ'],
        nutrition: { calories: 250, protein: 6, carbs: 40, fat: 8 },
        tags: ['Âä≤ÈÅì', 'ÁàΩÂè£', 'ÈÖçËèú‰∏∞ÂØå'],
        cookingTime: 'Áé∞ÊãåÁé∞ÂêÉ',
        origin: 'Ê±â‰∏≠‰º†ÁªüÂáâÊãåÈ£üÂìÅ'
    },
    {
        id: 5,
        name: 'Áï•Èò≥‰πåÈ∏°Ê±§',
        category: 'soup',
        image: 'img/food5.jpg',
        rating: 4.8,
        price: 58,
        description: 'ÈÄâÁî®Áï•Èò≥Áâπ‰∫ß‰πåÈ∏°ÁÇñÂà∂ÔºåËÇâË¥®È≤úÁæéÔºåËê•ÂÖª‰ª∑ÂÄºÊûÅÈ´òÔºåÊòØÊªãË°•ÂÖªÁîüÁöÑ‰Ω≥ÂìÅ„ÄÇ',
        ingredients: ['Áï•Èò≥‰πåÈ∏°', 'Â±±ËçØ', 'Êû∏Êùû', 'Á∫¢Êû£', 'ÂÖöÂèÇ', 'ÂΩìÂΩí'],
        restaurants: ['‰πåÈ∏°Áéã', 'ÂÖªÁîüÈ§êÂéÖ', 'ÊªãË°•Â†Ç'],
        nutrition: { calories: 380, protein: 35, carbs: 8, fat: 20 },
        tags: ['ÊªãË°•', 'Ëê•ÂÖª', 'Áâπ‰∫ß'],
        cookingTime: '2Â∞èÊó∂ÊÖ¢ÁÇñ',
        origin: 'Áï•Èò≥ÂéøÁâπËâ≤ÂÖªÁîüÊ±§ÂìÅ'
    },
    {
        id: 6,
        name: 'Ê¥ãÂéøÈªëÁ±≥Á≤•',
        category: 'dessert',
        image: 'img/food6.jpg',
        rating: 4.4,
        price: 25,
        description: 'ÈÄâÁî®Ê¥ãÂéø‰ºòË¥®ÈªëÁ±≥ÁÜ¨Âà∂ÔºåÂØåÂê´Ëä±ÈùíÁ¥†ÂíåÂ§öÁßçÁª¥ÁîüÁ¥†ÔºåÊó¢ÁæéÂë≥ÂèàÂÅ•Â∫∑„ÄÇ',
        ingredients: ['Ê¥ãÂéøÈªëÁ±≥', 'Á∫¢Êû£', 'Ê°ÇÂúÜ', 'ÂÜ∞Á≥ñ', 'Êû∏Êùû'],
        restaurants: ['ÂÖªÁîüÁ≤•Èì∫', 'ÂÅ•Â∫∑È£üÂ∫ú', 'ÈªëÁ±≥‰∏ìÂÆ∂'],
        nutrition: { calories: 220, protein: 8, carbs: 45, fat: 2 },
        tags: ['ÂÖªÁîü', 'ÊäóÊ∞ßÂåñ', 'ÁæéÂÆπ'],
        cookingTime: '1Â∞èÊó∂ÊÖ¢ÁÖÆ',
        origin: 'Ê¥ãÂéøÁâπ‰∫ßÈªëÁ±≥Âà∂ÂìÅ'
    },
    {
        id: 7,
        name: 'Ê±â‰∏≠ÁÉ≠Á±≥ÁöÆ',
        category: 'noodles',
        image: 'img/food7.jpg',
        rating: 4.7,
        price: 16,
        description: 'ÁÉ≠ËÖæËÖæÁöÑÁ±≥ÁöÆÈÖç‰ª•È≤úÁæéÊ±§Ê±ÅÔºåÊ∏©ÊöñÁöÑÂè£ÊÑüÈÄÇÂêàÂØíÂÜ∑Â≠£ËäÇ‰∫´Áî®„ÄÇ',
        ingredients: ['Á±≥ÁöÆ', 'Ë±ÜËäΩ', 'Èü≠Ëèú', 'ËÇâ‰∏ù', 'È´òÊ±§', 'Ëæ£Ê§íÊ≤π'],
        restaurants: ['ÁÉ≠Á±≥ÁöÆ‰∏ìÂÆ∂', 'Ê∏©ÊöñÂ∞èÂêÉ', 'Ê±â‰∏≠ÁâπËâ≤'],
        nutrition: { calories: 300, protein: 12, carbs: 48, fat: 7 },
        tags: ['Ê∏©ÁÉ≠', 'È≤úÁæé', 'ÂÜ¨Â≠£È¶ñÈÄâ'],
        cookingTime: 'Áé∞ÂÅöÁé∞ÂêÉ',
        origin: 'Ê±â‰∏≠ÂÜ¨Â≠£ÁâπËâ≤Â∞èÂêÉ'
    },
    {
        id: 8,
        name: 'ÂüéÂõ∫ËúúÊ°î',
        category: 'fruit',
        image: 'img/food8.jpg',
        rating: 4.6,
        price: 30,
        description: 'ÂüéÂõ∫Áâπ‰∫ßËúúÊ°îÔºåÁîúÁæéÂ§öÊ±ÅÔºåÂØåÂê´Áª¥ÁîüÁ¥†CÔºåÊòØÂ§©ÁÑ∂ÁöÑÂÅ•Â∫∑Ê∞¥Êûú„ÄÇ',
        ingredients: ['Êñ∞È≤úËúúÊ°î'],
        restaurants: ['Ê∞¥ÊûúË∂ÖÂ∏Ç', 'ÂÜúÂÆ∂Áõ¥ÈîÄ', 'Áâπ‰∫ßÂ∫ó'],
        nutrition: { calories: 60, protein: 1, carbs: 15, fat: 0 },
        tags: ['Êñ∞È≤ú', 'Áª¥C‰∏∞ÂØå', 'Áâπ‰∫ß'],
        cookingTime: 'Âç≥È£ü',
        origin: 'ÂüéÂõ∫ÂéøÁâπ‰∫ßÊ∞¥Êûú'
    }
];

// ÂàÜÁ±ªÊï∞ÊçÆ
const categoryData = [
    { key: 'all', name: 'ÂÖ®ÈÉ®ÁæéÈ£ü', icon: 'üçΩÔ∏è' },
    { key: 'noodles', name: 'Èù¢È£üÁ±ª', icon: 'üçú' },
    { key: 'soup', name: 'Ê±§ÂìÅÁ±ª', icon: 'üç≤' },
    { key: 'cold', name: 'ÂáâÊãåÁ±ª', icon: 'ü•ó' },
    { key: 'dessert', name: 'ÁîúÂìÅÁ±ª', icon: 'üçØ' },
    { key: 'fruit', name: 'Ê∞¥ÊûúÁ±ª', icon: 'üçä' }
];

// ÂàùÂßãÂåñÂàÜÁ±ªÁ≠õÈÄâ
function initFoodCategories() {
    const categoryContainer = document.querySelector('.food-categories');
    if (!categoryContainer) return;
    
    categoryContainer.innerHTML = '';
    
    categoryData.forEach(category => {
        const categoryItem = document.createElement('div');
        categoryItem.className = 'category-item';
        categoryItem.dataset.category = category.key;
        
        if (category.key === 'all') {
            categoryItem.classList.add('active');
        }
        
        categoryItem.innerHTML = `
            <span class="category-icon">${category.icon}</span>
            <span class="category-name">${category.name}</span>
            <span class="category-count">(${getCountByCategory(category.key)})</span>
        `;
        
        categoryItem.addEventListener('click', function() {
            // Êõ¥Êñ∞Ê¥ªÂä®Áä∂ÊÄÅ
            document.querySelectorAll('.category-item').forEach(item => {
                item.classList.remove('active');
            });
            this.classList.add('active');
            
            // Á≠õÈÄâÁæéÈ£ü
            filterFoodByCategory(category.key);
        });
        
        categoryContainer.appendChild(categoryItem);
    });
}

// Ëé∑ÂèñÂàÜÁ±ªÊï∞Èáè
function getCountByCategory(category) {
    if (category === 'all') return foodData.length;
    return foodData.filter(food => food.category === category).length;
}

// ÊåâÂàÜÁ±ªÁ≠õÈÄâÁæéÈ£ü
function filterFoodByCategory(category) {
    const foodCards = document.querySelectorAll('.food-card');
    
    foodCards.forEach((card, index) => {
        const food = foodData[index];
        
        if (category === 'all' || food.category === category) {
            card.style.display = 'block';
            card.classList.remove('hidden');
            setTimeout(() => {
                card.classList.add('show');
            }, 100);
        } else {
            card.classList.remove('show');
            card.classList.add('hidden');
            setTimeout(() => {
                card.style.display = 'none';
            }, 300);
        }
    });
}

// ÂàùÂßãÂåñÁæéÈ£üÂç°Áâá
function initFoodCards() {
    const foodGrid = document.querySelector('.food-grid');
    if (!foodGrid) return;
    
    foodGrid.innerHTML = '';
    
    foodData.forEach((food, index) => {
        const card = createFoodCard(food, index);
        foodGrid.appendChild(card);
    });
    
    // Ê∑ªÂä†ÊªöÂä®Âä®Áîª
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                setTimeout(() => {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }, index * 100);
            }
        });
    }, { threshold: 0.2 });
    
    document.querySelectorAll('.food-card').forEach(card => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px)';
        card.style.transition = 'all 0.6s ease';
        observer.observe(card);
    });
}

// ÂàõÂª∫ÁæéÈ£üÂç°Áâá
function createFoodCard(food) {
    const card = document.createElement('div');
    card.className = 'food-card';
    card.dataset.id = food.id;
    
    card.innerHTML = `
        <div class="card-image">
            <img src="${food.image}" alt="${food.name}" loading="lazy">
            <div class="card-overlay">
                <div class="food-tags">
                    ${food.tags.map(tag => `<span class="food-tag">${tag}</span>`).join('')}
                </div>
            </div>
        </div>
        <div class="card-content">
            <h3 class="food-name">${food.name}</h3>
            <div class="food-rating">
                <span class="stars">${generateStars(food.rating)}</span>
                <span class="rating-text">${food.rating}ÂàÜ</span>
            </div>
            <p class="food-description">${food.description}</p>
            <div class="food-info">
                <div class="info-item">
                    <span class="info-label">ÂèÇËÄÉ‰ª∑Ê†º</span>
                    <span class="info-value price">Ôø•${food.price}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Âà∂‰ΩúÊó∂Èó¥</span>
                    <span class="info-value">${food.cookingTime}</span>
                </div>
            </div>
            <div class="nutrition-bar">
                <div class="nutrition-item">
                    <span>ÁÉ≠Èáè</span>
                    <span>${food.nutrition.calories}kcal</span>
                </div>
                <div class="nutrition-item">
                    <span>ËõãÁôΩË¥®</span>
                    <span>${food.nutrition.protein}g</span>
                </div>
            </div>
            <div class="card-actions">
                <button class="btn btn-primary" onclick="showFoodModal(${food.id})">
                    ËØ¶ÁªÜ‰ªãÁªç
                </button>
                <button class="btn btn-outline" onclick="addToFavorites(${food.id})">
                    Êî∂Ëóè
                </button>
                <button class="btn btn-outline" onclick="showRestaurants(${food.id})">
                    Êé®ËçêÈ§êÂéÖ
                </button>
            </div>
        </div>
    `;
    
    // Ê∑ªÂä†ÊÇ¨ÊµÆÊïàÊûú
    card.addEventListener('mouseenter', function() {
        this.style.transform = 'translateY(-8px)';
        const img = this.querySelector('img');
        if (img) img.style.transform = 'scale(1.05)';
    });
    
    card.addEventListener('mouseleave', function() {
        this.style.transform = 'translateY(0)';
        const img = this.querySelector('img');
        if (img) img.style.transform = 'scale(1)';
    });
    
    return card;
}

// ÁîüÊàêÊòüÁ∫ßËØÑÂàÜ
function generateStars(rating) {
    let stars = '';
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    
    for (let i = 0; i < fullStars; i++) {
        stars += '‚òÖ';
    }
    
    if (hasHalfStar) {
        stars += '‚òÜ';
    }
    
    while (stars.length < 5) {
        stars += '‚òÜ';
    }
    
    return stars;
}

// ÊòæÁ§∫ÁæéÈ£üËØ¶ÊÉÖÂºπÁ™ó
function showFoodModal(foodId) {
    const food = foodData.find(item => item.id === foodId);
    if (!food) return;
    
    // ÂàõÂª∫ÊàñËé∑ÂèñÂºπÁ™ó
    let modal = document.getElementById('foodModal');
    if (!modal) {
        modal = createFoodModal();
    }
    
    // Â°´ÂÖÖÊï∞ÊçÆ
    const modalTitle = modal.querySelector('.modal-title');
    const modalImage = modal.querySelector('.modal-image img');
    const ratingValue = modal.querySelector('.rating-value');
    const priceValue = modal.querySelector('.price-value');
    const descriptionText = modal.querySelector('.description-text');
    const ingredientsList = modal.querySelector('.ingredients-list');
    const nutritionInfo = modal.querySelector('.nutrition-info');
    const originText = modal.querySelector('.origin-text');
    
    modalTitle.textContent = food.name;
    modalImage.src = food.image;
    modalImage.alt = food.name;
    ratingValue.textContent = `${food.rating}ÂàÜ`;
    priceValue.textContent = `Ôø•${food.price}`;
    descriptionText.textContent = food.description;
    originText.textContent = food.origin;
    
    // Â°´ÂÖÖÈÖçÊñô
    ingredientsList.innerHTML = '';
    food.ingredients.forEach(ingredient => {
        const item = document.createElement('span');
        item.className = 'ingredient-item';
        item.textContent = ingredient;
        ingredientsList.appendChild(item);
    });
    
    // Â°´ÂÖÖËê•ÂÖª‰ø°ÊÅØ
    nutritionInfo.innerHTML = `
        <div class="nutrition-item">
            <span class="nutrition-label">ÁÉ≠Èáè</span>
            <span class="nutrition-value">${food.nutrition.calories} kcal</span>
        </div>
        <div class="nutrition-item">
            <span class="nutrition-label">ËõãÁôΩË¥®</span>
            <span class="nutrition-value">${food.nutrition.protein} g</span>
        </div>
        <div class="nutrition-item">
            <span class="nutrition-label">Á¢≥Ê∞¥ÂåñÂêàÁâ©</span>
            <span class="nutrition-value">${food.nutrition.carbs} g</span>
        </div>
        <div class="nutrition-item">
            <span class="nutrition-label">ËÑÇËÇ™</span>
            <span class="nutrition-value">${food.nutrition.fat} g</span>
        </div>
    `;
    
    // ÊòæÁ§∫ÂºπÁ™ó
    modal.style.display = 'block';
    document.body.style.overflow = 'hidden';
}

// ÂàõÂª∫ÁæéÈ£üËØ¶ÊÉÖÂºπÁ™ó
function createFoodModal() {
    const modalHTML = `
        <div id="foodModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title"></h2>
                    <span class="modal-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="modal-image">
                        <img src="" alt="">
                    </div>
                    <div class="modal-info">
                        <div class="basic-info">
                            <div class="info-item">
                                <span class="info-label">ËØÑÂàÜ</span>
                                <span class="rating-value"></span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">‰ª∑Ê†º</span>
                                <span class="price-value"></span>
                            </div>
                        </div>
                        <div class="description">
                            <h4>ÁæéÈ£ü‰ªãÁªç</h4>
                            <p class="description-text"></p>
                        </div>
                        <div class="ingredients">
                            <h4>‰∏ªË¶ÅÈÖçÊñô</h4>
                            <div class="ingredients-list"></div>
                        </div>
                        <div class="nutrition">
                            <h4>Ëê•ÂÖªÊàêÂàÜ</h4>
                            <div class="nutrition-info"></div>
                        </div>
                        <div class="origin">
                            <h4>ÁæéÈ£üËµ∑Ê∫ê</h4>
                            <p class="origin-text"></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    const modal = document.getElementById('foodModal');
    const closeBtn = modal.querySelector('.modal-close');
    
    closeBtn.addEventListener('click', hideFoodModal);
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            hideFoodModal();
        }
    });
    
    return modal;
}

// ÈöêËóèÁæéÈ£üËØ¶ÊÉÖÂºπÁ™ó
function hideFoodModal() {
    const modal = document.getElementById('foodModal');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
}

// ÊòæÁ§∫Êé®ËçêÈ§êÂéÖ
function showRestaurants(foodId) {
    const food = foodData.find(item => item.id === foodId);
    if (!food) return;
    
    const restaurantList = food.restaurants.join('„ÄÅ');
    Utils.showMessage(`Êé®ËçêÈ§êÂéÖÔºö${restaurantList}`, 'info');
}

// Ê∑ªÂä†Âà∞Êî∂Ëóè
function addToFavorites(foodId) {
    const food = foodData.find(item => item.id === foodId);
    if (!food) return;
    
    let favorites = JSON.parse(localStorage.getItem('hanzhong_food_favorites') || '[]');
    
    if (favorites.includes(foodId)) {
        Utils.showMessage('Â∑≤ÁªèÊî∂ËóèËøáËØ•ÁæéÈ£ü‰∫Ü', 'info');
        return;
    }
    
    favorites.push(foodId);
    localStorage.setItem('hanzhong_food_favorites', JSON.stringify(favorites));
    
    Utils.showMessage(`Â∑≤Êî∂Ëóè ${food.name}`, 'success');
}

// ÂàùÂßãÂåñÈ§êÂéÖÂú∞Âõæ
function initRestaurantMap() {
    const mapContainer = document.querySelector('.restaurant-map');
    if (!mapContainer) return;
    
    // Ê®°ÊãüÈ§êÂéÖÊï∞ÊçÆ
    const restaurants = [
        { name: 'ËÄÅÊùéÈù¢ÁöÆÂ∫ó', lat: 33.0684, lng: 107.0281, specialty: 'Ê±â‰∏≠Èù¢ÁöÆ', rating: 4.8 },
        { name: 'Ê±âÊ±üÈù¢ÁöÆ', lat: 33.0694, lng: 107.0291, specialty: 'ÁÉ≠Á±≥ÁöÆ', rating: 4.7 },
        { name: 'ËÄÅÂë≥ÈÅì', lat: 33.0674, lng: 107.0271, specialty: 'ËèúË±ÜËÖê', rating: 4.6 },
        { name: 'ÊµÜÊ∞¥Èù¢È¶Ü', lat: 33.0664, lng: 107.0261, specialty: 'ÊµÜÊ∞¥Èù¢', rating: 4.9 },
        { name: '‰πåÈ∏°Áéã', lat: 33.0654, lng: 107.0251, specialty: 'Áï•Èò≥‰πåÈ∏°Ê±§', rating: 4.8 }
    ];
    
    // ÂàõÂª∫ÁÆÄÊòìÂú∞ÂõæÁïåÈù¢
    mapContainer.innerHTML = `
        <div class="map-header">
            <h3>Êé®ËçêÈ§êÂéÖÂàÜÂ∏É</h3>
            <div class="map-controls">
                <button class="map-btn" onclick="centerMap()">ÂÆö‰Ωç‰∏≠ÂøÉ</button>
                <button class="map-btn" onclick="showAllRestaurants()">ÊòæÁ§∫ÂÖ®ÈÉ®</button>
            </div>
        </div>
        <div class="map-content">
            <div class="restaurant-list">
                ${restaurants.map((restaurant, index) => `
                    <div class="restaurant-item" data-index="${index}">
                        <div class="restaurant-info">
                            <h4>${restaurant.name}</h4>
                            <p>ÊãõÁâåÔºö${restaurant.specialty}</p>
                            <div class="restaurant-rating">
                                ${generateStars(restaurant.rating)} ${restaurant.rating}ÂàÜ
                            </div>
                        </div>
                        <div class="restaurant-actions">
                            <button class="btn-small" onclick="showOnMap(${index})">Âú∞Âõæ</button>
                            <button class="btn-small" onclick="getDirections(${index})">ÂØºËà™</button>
                        </div>
                    </div>
                `).join('')}
            </div>
            <div class="map-placeholder">
                <div class="map-info">
                    <p>üó∫Ô∏è ‰∫íÂä®Âú∞Âõæ</p>
                    <p>ÁÇπÂáªÈ§êÂéÖÊü•Áúã‰ΩçÁΩÆ</p>
                    <div class="map-legend">
                        <div class="legend-item">
                            <span class="legend-color" style="background: #ff6b6b;"></span>
                            <span>Èù¢È£üÁ±ªÈ§êÂéÖ</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color" style="background: #4ecdc4;"></span>
                            <span>Ê±§ÂìÅÁ±ªÈ§êÂéÖ</span>
                        </div>
                        <div class="legend-item">
                            <span class="legend-color" style="background: #45b7d1;"></span>
                            <span>ÁâπËâ≤È§êÂéÖ</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// Âú∞ÂõæÁõ∏ÂÖ≥ÂáΩÊï∞
function centerMap() {
    Utils.showMessage('Âú∞ÂõæÂ∑≤ÂÆö‰ΩçÂà∞Ê±â‰∏≠Â∏Ç‰∏≠ÂøÉ', 'info');
}

function showAllRestaurants() {
    Utils.showMessage('ÊòæÁ§∫ÊâÄÊúâÊé®ËçêÈ§êÂéÖ', 'info');
}

function showOnMap(index) {
    Utils.showMessage(`Âú®Âú∞Âõæ‰∏äÊòæÁ§∫È§êÂéÖ‰ΩçÁΩÆ`, 'info');
}

function getDirections(index) {
    Utils.showMessage('Ëé∑ÂèñÂØºËà™Ë∑ØÁ∫øÂäüËÉΩÂºÄÂèë‰∏≠...', 'info');
}

// ÂàùÂßãÂåñÊêúÁ¥¢ÂäüËÉΩ
function initFoodSearch() {
    const searchInput = document.querySelector('.food-search');
    if (!searchInput) return;
    
    searchInput.addEventListener('input', Utils.debounce(function() {
        const keyword = this.value.trim().toLowerCase();
        searchFood(keyword);
    }, 300));
}

// ÊêúÁ¥¢ÁæéÈ£ü
function searchFood(keyword) {
    const foodCards = document.querySelectorAll('.food-card');
    
    if (!keyword) {
        foodCards.forEach(card => {
            card.style.display = 'block';
        });
        return;
    }
    
    foodCards.forEach((card, index) => {
        const food = foodData[index];
        if (!food) return;
        
        const isMatch = food.name.toLowerCase().includes(keyword) ||
                       food.description.toLowerCase().includes(keyword) ||
                       food.tags.some(tag => tag.toLowerCase().includes(keyword)) ||
                       food.ingredients.some(ingredient => ingredient.toLowerCase().includes(keyword));
        
        card.style.display = isMatch ? 'block' : 'none';
    });
}

// ÂàùÂßãÂåñËØÑ‰ª∑Á≥ªÁªü
function initReviewSystem() {
    const reviewContainer = document.querySelector('.reviews-section');
    if (!reviewContainer) return;
    
    // Ê®°ÊãüËØÑ‰ª∑Êï∞ÊçÆ
    const reviews = [
        {
            user: 'ÁæéÈ£üÁà±Â•ΩËÄÖ',
            avatar: 'üë§',
            food: 'Ê±â‰∏≠Èù¢ÁöÆ',
            rating: 5,
            comment: 'Ê≠£ÂÆóÁöÑÊ±â‰∏≠Èù¢ÁöÆÔºåÂë≥ÈÅìÂ§™Ê£í‰∫ÜÔºÅÈù¢ÁöÆÁàΩÊªëÔºåË∞ÉÊñô‰∏∞ÂØåÔºå‰∏ÄÂÆöË¶ÅÂ∞ùËØï„ÄÇ',
            date: '2024-01-15',
            helpful: 23
        },
        {
            user: 'Êú¨Âú∞‰∫∫',
            avatar: 'üë®‚Äçüç≥',
            food: 'ËèúË±ÜËÖê',
            rating: 4,
            comment: '‰ªéÂ∞èÂêÉÂà∞Â§ßÁöÑÂë≥ÈÅìÔºåËê•ÂÖª‰∏∞ÂØåÔºåËÄÅÂ∞ëÁöÜÂÆú„ÄÇÊé®ËçêËÄÅÂë≥ÈÅìËøôÂÆ∂Â∫ó„ÄÇ',
            date: '2024-01-10',
            helpful: 18
        },
        {
            user: 'Ê∏∏ÂÆ¢',
            avatar: 'üß≥',
            food: 'ÊµÜÊ∞¥Èù¢',
            rating: 5,
            comment: 'Á¨¨‰∏ÄÊ¨°ÂêÉÊµÜÊ∞¥Èù¢ÔºåÈÖ∏ÁàΩÂºÄËÉÉÔºåÁâπÂà´ÈÄÇÂêàÂ§èÂ§©„ÄÇÊ±â‰∏≠ÁâπËâ≤Áúü‰∏çÈîôÔºÅ',
            date: '2024-01-08',
            helpful: 15
        }
    ];
    
    reviewContainer.innerHTML = `
        <div class="reviews-header">
            <h3>È£üÂÆ¢ÁÇπËØÑ</h3>
            <button class="btn btn-primary" onclick="showReviewForm()">ÂÜôÁÇπËØÑ</button>
        </div>
        <div class="reviews-list">
            ${reviews.map(review => `
                <div class="review-item">
                    <div class="review-header">
                        <div class="reviewer-info">
                            <span class="reviewer-avatar">${review.avatar}</span>
                            <div class="reviewer-details">
                                <h4>${review.user}</h4>
                                <p>ÁÇπËØÑ‰∫ÜÔºö${review.food}</p>
                            </div>
                        </div>
                        <div class="review-rating">
                            ${generateStars(review.rating)}
                        </div>
                    </div>
                    <div class="review-content">
                        <p>${review.comment}</p>
                    </div>
                    <div class="review-footer">
                        <span class="review-date">${review.date}</span>
                        <button class="helpful-btn" onclick="markHelpful(this)">
                            üëç ÊúâÁî® (${review.helpful})
                        </button>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

// ÊòæÁ§∫ËØÑ‰ª∑Ë°®Âçï
function showReviewForm() {
    Utils.showMessage('ËØÑ‰ª∑ÂäüËÉΩÂºÄÂèë‰∏≠ÔºåÊï¨ËØ∑ÊúüÂæÖ...', 'info');
}

// Ê†áËÆ∞ÊúâÁî®
function markHelpful(button) {
    const currentText = button.textContent;
    const currentCount = parseInt(currentText.match(/\d+/)[0]);
    button.textContent = currentText.replace(/\d+/, currentCount + 1);
    button.disabled = true;
    button.style.opacity = '0.6';
    Utils.showMessage('ÊÑüË∞¢ÊÇ®ÁöÑÂèçÈ¶àÔºÅ', 'success');
}

// ÂàùÂßãÂåñÂàÜÁ±ªÊ†áÁ≠æÂäüËÉΩ
function initCategoryTabs() {
    const categoryTabs = document.querySelectorAll('.category-tab');
    const foodItems = document.querySelectorAll('.food-item');
    
    if (!categoryTabs.length || !foodItems.length) {
        return;
    }
    
    categoryTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            const category = this.dataset.category;
            
            // Êõ¥Êñ∞Ê¥ªÂä®Ê†áÁ≠æ
            categoryTabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            
            // Á≠õÈÄâÁæéÈ£üÈ°πÁõÆ
            filterFoodItems(category, foodItems);
        });
    });
}

// Á≠õÈÄâÁæéÈ£üÈ°πÁõÆ
function filterFoodItems(category, foodItems) {
    foodItems.forEach(item => {
        const itemCategory = item.dataset.category;
        
        if (category === 'all' || itemCategory === category) {
            // ÊòæÁ§∫È°πÁõÆ
            item.style.display = 'flex';
            item.style.opacity = '0';
            setTimeout(() => {
                item.style.opacity = '1';
                item.style.transform = 'translateY(0)';
            }, 100);
        } else {
            // ÈöêËóèÈ°πÁõÆ
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            setTimeout(() => {
                item.style.display = 'none';
            }, 300);
        }
    });
}

// ÊªöÂä®Âä®Áîª
function initScrollAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animated');
            }
        });
    }, observerOptions);
    
    // ËßÇÂØüÈúÄË¶ÅÂä®ÁîªÁöÑÂÖÉÁ¥†
    const animatedElements = document.querySelectorAll(
        '.food-card, .restaurant-card, .program-item, .gallery-item'
    );
    
    animatedElements.forEach(el => {
        observer.observe(el);
    });
}

// ÊÇ¨ÊµÆÊïàÊûú
function initHoverEffects() {
    // ÁæéÈ£üÂç°ÁâáÊÇ¨ÊµÆÊïàÊûú
    const foodCards = document.querySelectorAll('.food-card');
    foodCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-8px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
    
    // È§êÂéÖÂç°ÁâáÊÇ¨ÊµÆÊïàÊûú
    const restaurantCards = document.querySelectorAll('.restaurant-card');
    restaurantCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-8px)';
            const img = this.querySelector('img');
            if (img) img.style.transform = 'scale(1.1)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            const img = this.querySelector('img');
            if (img) img.style.transform = 'scale(1)';
        });
    });
    
    // ‰ΩìÈ™åÈ°πÁõÆÊÇ¨ÊµÆÊïàÊûú
    const programItems = document.querySelectorAll('.program-item');
    programItems.forEach(item => {
        item.addEventListener('mouseenter', function() {
            this.style.transform = 'translateX(10px)';
            this.style.borderLeftColor = '#764ba2';
        });
        
        item.addEventListener('mouseleave', function() {
            this.style.transform = 'translateX(0)';
            this.style.borderLeftColor = '#667eea';
        });
    });
}

// È¢ÑÁ∫¶‰ΩìÈ™åÂäüËÉΩ
function bookExperience(programType) {
    const programs = {
        'noodles': 'ÁÉ≠Èù¢ÁöÆÂà∂‰Ωú‰ΩìÈ™å',
        'dumplings': 'Ê±â‰∏≠È•∫Â≠ê‰ΩìÈ™å', 
        'tofu': 'ËèúË±ÜËÖêÂà∂‰Ωú‰ΩìÈ™å'
    };
    
    const programName = programs[programType] || 'ÁæéÈ£üÂà∂‰Ωú‰ΩìÈ™å';
    
    if (confirm(`Á°ÆÂÆöË¶ÅÈ¢ÑÁ∫¶"${programName}"ÂêóÔºü`)) {
        alert(`È¢ÑÁ∫¶ÊàêÂäüÔºÅÊàë‰ª¨Â∞ÜÂú®24Â∞èÊó∂ÂÜÖËÅîÁ≥ªÊÇ®Á°ÆËÆ§ÂÖ∑‰ΩìÊó∂Èó¥„ÄÇ`);
    }
}

// Êü•ÁúãÈ§êÂéÖËØ¶ÊÉÖ
function viewRestaurantDetails(restaurantId) {
    alert('È§êÂéÖËØ¶ÊÉÖÈ°µÈù¢Ê≠£Âú®ÂºÄÂèë‰∏≠...');
}

// ÂàÜ‰∫´ÁæéÈ£üÂäüËÉΩ
function shareFood(foodName, description) {
    const shareText = `${foodName} - ${description}\nÊü•ÁúãÊõ¥Â§öÊ±â‰∏≠ÁæéÈ£ü: ${window.location.href}`;
    
    if (navigator.clipboard) {
        navigator.clipboard.writeText(shareText).then(() => {
            alert('ÂàÜ‰∫´ÈìæÊé•Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅ');
        });
    } else {
        // ÂàõÂª∫‰∏¥Êó∂ÊñáÊú¨Âå∫Âüü
        const textArea = document.createElement('textarea');
        textArea.value = shareText;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        alert('ÂàÜ‰∫´ÈìæÊé•Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅ');
    }
}

// ÂÖ®Â±ÄÂáΩÊï∞Ôºà‰æõHTMLË∞ÉÁî®Ôºâ
window.bookExperience = bookExperience;
window.viewRestaurantDetails = viewRestaurantDetails;
window.shareFood = shareFood;

// Ê∑ªÂä†Ê†∑Âºè
const style = document.createElement('style');
style.textContent = `
    .food-card {
        background: white;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .card-image {
        position: relative;
        height: 200px;
        overflow: hidden;
    }
    
    .card-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    
    .card-overlay {
        position: absolute;
        top: 15px;
        right: 15px;
    }
    
    .food-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
    }
    
    .food-tag {
        background: rgba(255,255,255,0.9);
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        color: #667eea;
        font-weight: bold;
    }
    
    .card-content {
        padding: 20px;
    }
    
    .food-name {
        color: #333;
        margin-bottom: 10px;
        font-size: 20px;
    }
    
    .food-rating {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 15px;
    }
    
    .stars {
        color: #ffc107;
        font-size: 16px;
    }
    
    .rating-text {
        color: #666;
        font-size: 14px;
    }
    
    .food-description {
        color: #666;
        line-height: 1.6;
        margin-bottom: 20px;
        font-size: 14px;
    }
    
    .food-info {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        margin-bottom: 15px;
    }
    
    .info-item {
        text-align: center;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 8px;
    }
    
    .info-label {
        display: block;
        font-size: 12px;
        color: #666;
        margin-bottom: 5px;
    }
    
    .info-value {
        font-weight: bold;
        color: #333;
    }
    
    .info-value.price {
        color: #e74c3c;
        font-size: 16px;
    }
    
    .nutrition-bar {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 8px;
    }
    
    .nutrition-item {
        text-align: center;
        font-size: 12px;
    }
    
    .nutrition-item span:first-child {
        display: block;
        color: #666;
        margin-bottom: 5px;
    }
    
    .nutrition-item span:last-child {
        font-weight: bold;
        color: #667eea;
    }
    
    .card-actions {
        display: flex;
        gap: 10px;
    }
    
    .card-actions .btn {
        flex: 1;
        padding: 8px 12px;
        font-size: 13px;
    }
    
    .restaurant-map {
        background: white;
        border-radius: 20px;
        padding: 25px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .map-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .map-controls {
        display: flex;
        gap: 10px;
    }
    
    .map-btn {
        padding: 8px 15px;
        background: #667eea;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 12px;
        transition: background 0.3s ease;
    }
    
    .map-btn:hover {
        background: #5a6fd8;
    }
    
    .map-content {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }
    
    .restaurant-list {
        max-height: 400px;
        overflow-y: auto;
    }
    
    .restaurant-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        margin-bottom: 10px;
        transition: all 0.3s ease;
    }
    
    .restaurant-item:hover {
        border-color: #667eea;
        box-shadow: 0 3px 10px rgba(102, 126, 234, 0.2);
    }
    
    .restaurant-info h4 {
        color: #333;
        margin-bottom: 5px;
    }
    
    .restaurant-info p {
        color: #666;
        font-size: 13px;
        margin-bottom: 8px;
    }
    
    .restaurant-rating {
        font-size: 12px;
        color: #ffc107;
    }
    
    .restaurant-actions {
        display: flex;
        gap: 8px;
    }
    
    .btn-small {
        padding: 6px 12px;
        background: #f8f9fa;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        cursor: pointer;
        font-size: 11px;
        transition: all 0.3s ease;
    }
    
    .btn-small:hover {
        background: #667eea;
        color: white;
        border-color: #667eea;
    }
    
    .map-placeholder {
        background: #f8f9fa;
        border-radius: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 400px;
    }
    
    .map-info {
        text-align: center;
        color: #666;
    }
    
    .map-info p:first-child {
        font-size: 2em;
        margin-bottom: 10px;
    }
    
    .map-legend {
        margin-top: 20px;
        text-align: left;
    }
    
    .legend-item {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 8px;
        font-size: 12px;
    }
    
    .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 50%;
    }
    
    .reviews-section {
        background: white;
        border-radius: 20px;
        padding: 25px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .reviews-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
    }
    
    .review-item {
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 20px;
        margin-bottom: 20px;
    }
    
    .review-item:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }
    
    .review-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 15px;
    }
    
    .reviewer-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }
    
    .reviewer-avatar {
        font-size: 2em;
    }
    
    .reviewer-details h4 {
        color: #333;
        margin-bottom: 5px;
        font-size: 16px;
    }
    
    .reviewer-details p {
        color: #666;
        font-size: 13px;
        margin: 0;
    }
    
    .review-rating {
        color: #ffc107;
    }
    
    .review-content p {
        color: #555;
        line-height: 1.6;
        margin-bottom: 15px;
    }
    
    .review-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .review-date {
        color: #999;
        font-size: 12px;
    }
    
    .helpful-btn {
        background: none;
        border: 1px solid #e0e0e0;
        padding: 6px 12px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 12px;
        color: #666;
        transition: all 0.3s ease;
    }
    
    .helpful-btn:hover:not(:disabled) {
        border-color: #667eea;
        color: #667eea;
    }
    
    .helpful-btn:disabled {
        cursor: not-allowed;
    }
    
    @media (max-width: 768px) {
        .map-content {
            grid-template-columns: 1fr;
        }
        
        .restaurant-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }
        
        .food-info {
            grid-template-columns: 1fr;
            gap: 10px;
        }
        
        .card-actions {
            flex-direction: column;
        }
    }
`;
document.head.appendChild(style); 